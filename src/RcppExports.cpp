// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// d_dgeom
Rcpp::NumericVector d_dgeom(const Rcpp::NumericVector& x, double p, bool take_log);
RcppExport SEXP _DirectSampling_d_dgeom(SEXP xSEXP, SEXP pSEXP, SEXP take_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type take_log(take_logSEXP);
    rcpp_result_gen = Rcpp::wrap(d_dgeom(x, p, take_log));
    return rcpp_result_gen;
END_RCPP
}
// p_dgeom
Rcpp::NumericVector p_dgeom(const Rcpp::NumericVector& x, double p);
RcppExport SEXP _DirectSampling_p_dgeom(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(p_dgeom(x, p));
    return rcpp_result_gen;
END_RCPP
}
// r_dgeom
Rcpp::NumericVector r_dgeom(unsigned int n, double p);
RcppExport SEXP _DirectSampling_r_dgeom(SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(r_dgeom(n, p));
    return rcpp_result_gen;
END_RCPP
}
// q_dgeom
Rcpp::NumericVector q_dgeom(const Rcpp::NumericVector& q, double p);
RcppExport SEXP _DirectSampling_q_dgeom(SEXP qSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(q_dgeom(q, p));
    return rcpp_result_gen;
END_RCPP
}
// hi_dscnorm
int hi_dscnorm(double sigma, double tol);
RcppExport SEXP _DirectSampling_hi_dscnorm(SEXP sigmaSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(hi_dscnorm(sigma, tol));
    return rcpp_result_gen;
END_RCPP
}
// d_dscnorm
Rcpp::NumericVector d_dscnorm(const Rcpp::NumericVector& x, double sigma, double tol, bool take_log, bool normalize);
RcppExport SEXP _DirectSampling_d_dscnorm(SEXP xSEXP, SEXP sigmaSEXP, SEXP tolSEXP, SEXP take_logSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type take_log(take_logSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(d_dscnorm(x, sigma, tol, take_log, normalize));
    return rcpp_result_gen;
END_RCPP
}
// p_dscnorm
Rcpp::NumericVector p_dscnorm(const Rcpp::NumericVector& x, double sigma, double tol);
RcppExport SEXP _DirectSampling_p_dscnorm(SEXP xSEXP, SEXP sigmaSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(p_dscnorm(x, sigma, tol));
    return rcpp_result_gen;
END_RCPP
}
// r_dscnorm
Rcpp::IntegerVector r_dscnorm(unsigned int n, double sigma);
RcppExport SEXP _DirectSampling_r_dscnorm(SEXP nSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(r_dscnorm(n, sigma));
    return rcpp_result_gen;
END_RCPP
}
// q_dscnorm
Rcpp::IntegerVector q_dscnorm(const Rcpp::NumericVector& q, double sigma, double tol);
RcppExport SEXP _DirectSampling_q_dscnorm(SEXP qSEXP, SEXP sigmaSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(q_dscnorm(q, sigma, tol));
    return rcpp_result_gen;
END_RCPP
}
// find_interval
int find_interval(double x, const Rcpp::NumericVector& cutpoints);
RcppExport SEXP _DirectSampling_find_interval(SEXP xSEXP, SEXP cutpointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type cutpoints(cutpointsSEXP);
    rcpp_result_gen = Rcpp::wrap(find_interval(x, cutpoints));
    return rcpp_result_gen;
END_RCPP
}
// d_laplace
Rcpp::NumericVector d_laplace(const Rcpp::NumericVector& x, double mu, double lambda, bool take_log);
RcppExport SEXP _DirectSampling_d_laplace(SEXP xSEXP, SEXP muSEXP, SEXP lambdaSEXP, SEXP take_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type take_log(take_logSEXP);
    rcpp_result_gen = Rcpp::wrap(d_laplace(x, mu, lambda, take_log));
    return rcpp_result_gen;
END_RCPP
}
// p_laplace
Rcpp::NumericVector p_laplace(const Rcpp::NumericVector& x, double mu, double lambda);
RcppExport SEXP _DirectSampling_p_laplace(SEXP xSEXP, SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(p_laplace(x, mu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// r_laplace
Rcpp::NumericVector r_laplace(unsigned int n, double mu, double lambda);
RcppExport SEXP _DirectSampling_r_laplace(SEXP nSEXP, SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(r_laplace(n, mu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// q_laplace
Rcpp::NumericVector q_laplace(const Rcpp::NumericVector& q, double mu, double lambda);
RcppExport SEXP _DirectSampling_q_laplace(SEXP qSEXP, SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(q_laplace(q, mu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// direct_sampler_lognormal_normal
Rcpp::NumericVector direct_sampler_lognormal_normal(unsigned int n, double z, double mu, double sigma2, double tau, double tol, unsigned int N, const std::string& fill_method, unsigned int max_rejections);
RcppExport SEXP _DirectSampling_direct_sampler_lognormal_normal(SEXP nSEXP, SEXP zSEXP, SEXP muSEXP, SEXP sigma2SEXP, SEXP tauSEXP, SEXP tolSEXP, SEXP NSEXP, SEXP fill_methodSEXP, SEXP max_rejectionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type fill_method(fill_methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_rejections(max_rejectionsSEXP);
    rcpp_result_gen = Rcpp::wrap(direct_sampler_lognormal_normal(n, z, mu, sigma2, tau, tol, N, fill_method, max_rejections));
    return rcpp_result_gen;
END_RCPP
}
// direct_sampler_lognormal_dscnorm
Rcpp::NumericVector direct_sampler_lognormal_dscnorm(unsigned int n, double z, double mu, double sigma2, double tau, double tol, unsigned int N, const std::string& fill_method, unsigned int max_rejections);
RcppExport SEXP _DirectSampling_direct_sampler_lognormal_dscnorm(SEXP nSEXP, SEXP zSEXP, SEXP muSEXP, SEXP sigma2SEXP, SEXP tauSEXP, SEXP tolSEXP, SEXP NSEXP, SEXP fill_methodSEXP, SEXP max_rejectionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type fill_method(fill_methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_rejections(max_rejectionsSEXP);
    rcpp_result_gen = Rcpp::wrap(direct_sampler_lognormal_dscnorm(n, z, mu, sigma2, tau, tol, N, fill_method, max_rejections));
    return rcpp_result_gen;
END_RCPP
}
// direct_sampler_lognormal_laplace
Rcpp::NumericVector direct_sampler_lognormal_laplace(unsigned int n, double z, double mu, double sigma2, double lambda, double tol, unsigned int N, const std::string& fill_method, unsigned int max_rejections);
RcppExport SEXP _DirectSampling_direct_sampler_lognormal_laplace(SEXP nSEXP, SEXP zSEXP, SEXP muSEXP, SEXP sigma2SEXP, SEXP lambdaSEXP, SEXP tolSEXP, SEXP NSEXP, SEXP fill_methodSEXP, SEXP max_rejectionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type fill_method(fill_methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_rejections(max_rejectionsSEXP);
    rcpp_result_gen = Rcpp::wrap(direct_sampler_lognormal_laplace(n, z, mu, sigma2, lambda, tol, N, fill_method, max_rejections));
    return rcpp_result_gen;
END_RCPP
}
// direct_sampler_lognormal_dgeom
Rcpp::NumericVector direct_sampler_lognormal_dgeom(unsigned int n, double z, double mu, double sigma2, double rho, double tol, unsigned int N, const std::string& fill_method, unsigned int max_rejections);
RcppExport SEXP _DirectSampling_direct_sampler_lognormal_dgeom(SEXP nSEXP, SEXP zSEXP, SEXP muSEXP, SEXP sigma2SEXP, SEXP rhoSEXP, SEXP tolSEXP, SEXP NSEXP, SEXP fill_methodSEXP, SEXP max_rejectionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type fill_method(fill_methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_rejections(max_rejectionsSEXP);
    rcpp_result_gen = Rcpp::wrap(direct_sampler_lognormal_dgeom(n, z, mu, sigma2, rho, tol, N, fill_method, max_rejections));
    return rcpp_result_gen;
END_RCPP
}
// direct_sampler_normal_laplace
Rcpp::NumericVector direct_sampler_normal_laplace(unsigned int n, double z, double mu, double sigma2, double lambda, double tol, unsigned int N, const std::string& fill_method, unsigned int max_rejections);
RcppExport SEXP _DirectSampling_direct_sampler_normal_laplace(SEXP nSEXP, SEXP zSEXP, SEXP muSEXP, SEXP sigma2SEXP, SEXP lambdaSEXP, SEXP tolSEXP, SEXP NSEXP, SEXP fill_methodSEXP, SEXP max_rejectionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type fill_method(fill_methodSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type max_rejections(max_rejectionsSEXP);
    rcpp_result_gen = Rcpp::wrap(direct_sampler_normal_laplace(n, z, mu, sigma2, lambda, tol, N, fill_method, max_rejections));
    return rcpp_result_gen;
END_RCPP
}
// q_discrete
Rcpp::IntegerVector q_discrete(const Rcpp::NumericVector& q, const Rcpp::NumericVector& cp);
RcppExport SEXP _DirectSampling_q_discrete(SEXP qSEXP, SEXP cpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type cp(cpSEXP);
    rcpp_result_gen = Rcpp::wrap(q_discrete(q, cp));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DirectSampling_d_dgeom", (DL_FUNC) &_DirectSampling_d_dgeom, 3},
    {"_DirectSampling_p_dgeom", (DL_FUNC) &_DirectSampling_p_dgeom, 2},
    {"_DirectSampling_r_dgeom", (DL_FUNC) &_DirectSampling_r_dgeom, 2},
    {"_DirectSampling_q_dgeom", (DL_FUNC) &_DirectSampling_q_dgeom, 2},
    {"_DirectSampling_hi_dscnorm", (DL_FUNC) &_DirectSampling_hi_dscnorm, 2},
    {"_DirectSampling_d_dscnorm", (DL_FUNC) &_DirectSampling_d_dscnorm, 5},
    {"_DirectSampling_p_dscnorm", (DL_FUNC) &_DirectSampling_p_dscnorm, 3},
    {"_DirectSampling_r_dscnorm", (DL_FUNC) &_DirectSampling_r_dscnorm, 2},
    {"_DirectSampling_q_dscnorm", (DL_FUNC) &_DirectSampling_q_dscnorm, 3},
    {"_DirectSampling_find_interval", (DL_FUNC) &_DirectSampling_find_interval, 2},
    {"_DirectSampling_d_laplace", (DL_FUNC) &_DirectSampling_d_laplace, 4},
    {"_DirectSampling_p_laplace", (DL_FUNC) &_DirectSampling_p_laplace, 3},
    {"_DirectSampling_r_laplace", (DL_FUNC) &_DirectSampling_r_laplace, 3},
    {"_DirectSampling_q_laplace", (DL_FUNC) &_DirectSampling_q_laplace, 3},
    {"_DirectSampling_direct_sampler_lognormal_normal", (DL_FUNC) &_DirectSampling_direct_sampler_lognormal_normal, 9},
    {"_DirectSampling_direct_sampler_lognormal_dscnorm", (DL_FUNC) &_DirectSampling_direct_sampler_lognormal_dscnorm, 9},
    {"_DirectSampling_direct_sampler_lognormal_laplace", (DL_FUNC) &_DirectSampling_direct_sampler_lognormal_laplace, 9},
    {"_DirectSampling_direct_sampler_lognormal_dgeom", (DL_FUNC) &_DirectSampling_direct_sampler_lognormal_dgeom, 9},
    {"_DirectSampling_direct_sampler_normal_laplace", (DL_FUNC) &_DirectSampling_direct_sampler_normal_laplace, 9},
    {"_DirectSampling_q_discrete", (DL_FUNC) &_DirectSampling_q_discrete, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_DirectSampling(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
